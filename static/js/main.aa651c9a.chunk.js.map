{"version":3,"sources":["logo.svg","QuizUI.js","QuizAction.js","CircularSpinner.js","AlertDialogSlide.js","Quiz.js","App.js","reportWebVitals.js","RootReducer.js","QuizReducer.js","index.js","ConfigureStore.js"],"names":["QuizUI","props","titleStyle","padding","margin","align","React","useState","value","setValue","error","useEffect","console","log","question","selectionIndex","options","nextTapped","answerIndex","findIndex","obj","nextCallback","createStyles","formControlLabel","fontSize","color","isReview","Grid","AppBar","position","Toolbar","Typography","variant","item","Alert","severity","style","justifyContent","fontWeight","score","container","direction","spacing","alignItems","order","totalQuestion","length","FormControl","component","Box","m","RadioGroup","aria-label","name","onChange","event","target","updateSelectedIndex","map","option","FormControlLabel","control","Radio","label","Button","type","width","maxHeight","onClick","disabled","isLastQuestion","ButtonGroup","size","marginTop","marginRight","prevCallback","isFirstQuestion","quizItemsIsLoading","bool","isLoading","fetchQuiz","dispatch","axios","get","then","response","status","receivedResponse","data","forEach","element","split","parseInt","answer","id","quizid","items","hasErrored","statusText","headers","config","useStyles","makeStyles","theme","root","display","marginLeft","CircularSpinner","classes","className","CircularProgress","Transition","forwardRef","ref","Slide","AlertDialogSlide","open","setOpen","Dialog","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","onCancel","onSubmit","connect","state","quizItemsFetchDataSuccess","quizItemsHasErrored","loading","fetchQuestion","currentQuestion","setCurrentQuestion","setScore","setIsFirstQuestion","setIsLastQuestion","setIsReview","showConfirmAlert","setShowConfirmAlert","questions","setQuestions","newQues","flagFirstQuestion","flagLastQuestion","setStateCurrentQuestion","newOrder","showConfirmSubmit","setStatePrevCurrentQuestion","updateScore","index","correctAns","filter","eachQues","updateSelection","removeConfirmAlert","Paper","elevation","height","skipCallback","showAlert","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","initialState","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aa651c9a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState, useEffect } from 'react'\nimport { Grid, Paper, Avatar, TextField, Button, Typography, Box, Link, FormGroup, FormHelperText, createStyles, ButtonGroup, AppBar, Toolbar } from '@material-ui/core'\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport AppleIcon from '@material-ui/icons/Apple';\nimport Alert from '@material-ui/lab/Alert';\nconst QuizUI = (props) => {\n    const avatarStyle = { padding: 20, margin: \"0px auto\", backgroundColor: 'black', align: \"center\" }\n    const titleStyle = { padding: 20, margin: \"0px auto\", align: \"center\" }\n    const questionStyle = { padding: 0, margin: \"20px auto\", align: \"center\" }\n    const btnstyle = { margin: '8px 0' }\n    const alertStyle = { margin: '8px 0', justifyContent: 'center' }\n    const [value, setValue] = React.useState('');\n    const [error, setError] = React.useState(false);\n    const [helperText, setHelperText] = React.useState('Choose wisely');\n    const buttonStyle = { width: '200px', maxHeight: '50px', margin: '8px 0', align: 'center' }\n    const navButtonStyle = { width: '50px', maxHeight: '50px', margin: '8px 0', align: 'center', marginTop: '10px', marginRight: '50px' }\n    const handleRadioChange = (event) => {\n        setValue(event.target.value);\n        let answerIndex = props.question.options.findIndex(obj => obj === event.target.value);\n        //props.question.selectionIndex = answerIndex\n        props.updateSelectedIndex(answerIndex)\n    };\n    useEffect(() => {\n        console.log(\"I have been mounted\")\n    }, [])\n    useEffect(() => {\n        console.log(\"I have been mounted\")\n        if (props.question.selectionIndex != null) {\n            setValue(props.question.options[props.question.selectionIndex])\n        }\n    })\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        // if (value === 'best') {\n        //     setHelperText('You got it!');\n        //     setError(false);\n        // } else if (value === 'worst') {\n        //     setHelperText('Sorry, wrong answer!');\n        //     setError(true);\n        // } else {\n        //     setHelperText('Please select an option.');\n        //     setError(true);\n        // }\n    };\n    const nextTapped = () => {\n        let answerIndex = props.question.options.findIndex(obj => obj === value);\n        props.nextCallback(answerIndex)\n        //Reseting values after next\n        setValue('')\n    };\n    const prevTapped = () => {\n        props.prevCallback()\n    };\n    const skipTapped = () => {\n        props.skipCallback()\n    };\n    const styles = createStyles({\n        formControlLabel: { fontSize: '1.25rem', color: 'black' }\n    });\n    if (props.isReview) {\n        return (\n            <Grid>\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <Typography variant=\"h6\">Bible quiz-Test</Typography>\n                    </Toolbar>\n                </AppBar>\n                <Grid item>\n                    {/* <Avatar style={avatarStyle} ><AppleIcon fontSize=\"large\" /></Avatar> */}\n                    <Alert severity=\"success\" style={alertStyle}>Quiz completed\n                    <Typography fontWeight=\"fontWeightMedium\" style={titleStyle}>\n                            Score: {props.score} %\n            </Typography>\n                    </Alert>\n\n                </Grid>\n            </Grid >\n        )\n    }\n    return (\n        <Grid container direction={'column'} spacing={0} alignItems=\"center\">\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography variant=\"h6\">Bible quiz-Test</Typography>\n                </Toolbar>\n            </AppBar>\n            <Grid item>\n                {/* <Avatar style={avatarStyle} ><AppleIcon fontSize=\"large\" /></Avatar> */}\n\n                <Typography fontWeight=\"fontWeightMedium\" style={titleStyle}>\n                    Question: {props.question.order + 1}/{props.totalQuestion.length}\n                </Typography>\n            </Grid>\n            <Grid item>\n                <FormControl component=\"fieldset\" error={error} align=\"justify\">\n                    <Typography fontWeight=\"fontWeightBold\" style={questionStyle}>\n                        <Box fontWeight=\"fontWeightBold\" m={1}>\n                            {props.question.question}\n                        </Box>\n\n                    </Typography>\n                    <RadioGroup\n                        aria-label=\"quiz\"\n                        name=\"quiz\"\n                        value={value}\n                        onChange={handleRadioChange}\n                    >\n                        {props.question.options.map(option => { // using props in child component and looping\n                            return (\n                                <FormControlLabel value={option} control={<Radio />} label={option} />\n                            )\n                        })}\n                    </RadioGroup>\n                </FormControl>\n            </Grid>\n            <Grid item>\n                <Button type=\"submit\" variant=\"contained\" color=\"primary\" style={buttonStyle} onClick={nextTapped} disabled={value == ''}>\n                    {props.isLastQuestion ? \"Submit & Finish\" : \"Submit\"}\n                </Button>\n            </Grid>\n            <Grid item>\n                {/* <Button type=\"submit\" variant=\"outlined\" color=\"primary\" style={buttonStyle} onClick={skipTapped}>\n                Skip\n        </Button> */}\n                <ButtonGroup size=\"large\" color=\"primary\" aria-label=\"large outlined primary button group\" style={navButtonStyle}>\n                    <Button type=\"submit\" onClick={prevTapped} disabled={props.isFirstQuestion} >{'   <   '}</Button>\n                    <Button type=\"submit\" onClick={nextTapped} disabled={props.isLastQuestion}>{'   >   '}</Button>\n                </ButtonGroup>\n            </Grid>\n        </Grid>\n    )\n}\nexport default QuizUI","import React from 'react'\nimport axios from 'axios'\nexport function quizItemsHasErrored(bool) {\n    return {\n        type: 'QUIZ_ITEMS_HAS_ERRORED',\n        hasErrored: bool\n    };\n}\nexport function quizItemsIsLoading(bool) {\n    return {\n        type: 'QUIZ_ITEMS_IS_LOADING',\n        isLoading: bool\n    };\n}\nexport function quizItemsFetchDataSuccess(items) {\n    debugger;\n    console.log(\"Items\", items)\n    return {\n        type: 'QUIZ_ITEMS_FETCH_DATA_SUCCESS',\n        items\n    };\n}\nexport function fetchQuiz() {\n    debugger;\n    //https://docs.google.com/spreadsheets/d/e/2PACX-1vSPmHnnS5MOAemTHuP0wTcswJJbBHgMZy_nA7895sEVzKiawDhI_3KQG4Oy6eSwVPV0OCXBVtc2vttY/pubhtml\n    console.log('API hit')\n    return (dispatch) => {\n        dispatch(quizItemsIsLoading(true))\n        axios.get('https://sheet.best/api/sheets/2f58c9e3-b91b-431c-beec-055257bb9886')\n  .then((response) => {\n      if (response.status == 200) {\n      let receivedResponse = response.data\n      receivedResponse.forEach(element => {\n          element.options = element.options.split(',')\n          element.order = parseInt(element.order)\n          element.answer = parseInt(element.answer)\n          element.id = parseInt(element.id)\n          element.quizid = parseInt(element.quizid)\n      });\n      console.log(\"received response\", receivedResponse);\n      dispatch(quizItemsFetchDataSuccess(receivedResponse))\n      } else {\n      dispatch(quizItemsHasErrored(true))\n      }\n      dispatch(quizItemsIsLoading(false))\n   \n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });    \n    };\n}\n\n\n\n// setTimeout(\n//     () => {\n//         debugger;\n//         dispatch(quizItemsFetchDataSuccess([\n//             {\n//                 id: 1,\n//                 question: 'This is the first super question of the quizz app.',\n//                 options: ['test option1', 'test  firstoption2', 'test  first option3'],\n//                 type: 'Single',\n//                 answer: 0,\n//                 order: 0,\n//                 quizid: 1\n//             },\n//             {\n//                 id: 2,\n//                 question: 'This is the second super question of the quizz app.',\n//                 options: ['test option1', 'test option2', 'test option3'],\n//                 type: 'Single',\n//                 answer: 0,\n//                 order: 1,\n//                 quizid: 1\n//             },\n//             {\n//                 id: 3,\n//                 question: 'This is the third super question of the quizz app.',\n//                 options: ['test third option1', 'test third option2', 'test third option3'],\n//                 type: 'Single',\n//                 answer: 0,\n//                 order: 2,\n//                 quizid: 1\n//             },\n//         ]));\n//         dispatch(quizItemsIsLoading(false));\n//     }, \n//     3000\n//   );","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    '& > * + *': {\n      marginLeft: theme.spacing(2),\n    },\n    justifyContent: \"center\",\n      alignItems: \"center\",\n      margin: \"5px auto\"\n  },\n}));\n\nexport default function CircularSpinner() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <CircularProgress />\n    </div>\n  );\n}\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nconst AlertDialogSlide = (props) =>{\n  const [open, setOpen] = React.useState(true);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\n        Slide in alert dialog\n      </Button>\n      <Dialog\n        open={open}\n        TransitionComponent={Transition}\n        keepMounted\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-slide-title\"\n        aria-describedby=\"alert-dialog-slide-description\"\n      >\n        <DialogTitle id=\"alert-dialog-slide-title\">{\"Confirm submission?\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-slide-description\">\n            Are you sure to submit the quiz. \n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={props.onCancel} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={props.onSubmit} color=\"primary\">\n            Submit\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\nexport default AlertDialogSlide;","import React, { useState, useEffect } from 'react'\nimport { Grid, Paper, Avatar, TextField, Button, Typography, Link, FormGroup, FormHelperText } from '@material-ui/core'\nimport QuizUI from './QuizUI'\nimport { fetchQuiz, quizItemsFetchDataSuccess } from './QuizAction'\nimport {connect} from 'react-redux'\nimport CircularSpinner from './CircularSpinner'\nimport AlertDialogSlide from './AlertDialogSlide'\nimport { render } from '@testing-library/react'\nconst Quiz = (props) => {\n    const paperStyle = { padding: 20, height: '70h', width: '75%', margin: \"20px auto\", align: \"center\" }\n    const [currentQuestion, setCurrentQuestion] = useState(null)\n    const [score, setScore] = useState(0)\n    const [isFirstQuestion, setIsFirstQuestion] = useState(false)\n    const [isLastQuestion, setIsLastQuestion] = useState(false)\n    const [isReview, setIsReview] = useState(false)\n    const [showConfirmAlert, setShowConfirmAlert] = useState(false)\n    const [error, setError] = useState(false)\n    const [loading, setLoading] = useState(false)\n    const [response, setResponse] = useState([])\n    const [questions, setQuestions] = useState([]);\n    useEffect(() => {\n        console.log(\"Response\", props.response)\n        setQuestions(props.response)\n        console.log(\"Questions\", questions)\n        let newQues = questions[0]\n        setCurrentQuestion(newQues)\n    }, [props.response]);\n    useEffect(() => {\n        console.log(\"Questions\", questions)\n        let newQues = questions[0]\n        setCurrentQuestion(newQues)\n    }, [questions]);\n    useEffect(() => {\n        console.log(\"New score\", score)\n    }, [score]);\n    useEffect(() => {\n        debugger;\n        props.fetchQuestion()\n        console.log(\"Show confirm alert\", showConfirmAlert)\n    }, [])\n    useEffect(() => {\n        if (currentQuestion != null) {\n            flagFirstQuestion()\n            flagLastQuestion()\n        }\n        console.log(\"Show confirm alert\", showConfirmAlert)\n    });\n    const nextTapped = (index) => {\n        debugger;\n        if (currentQuestion.selectionIndex != index) {\n            updateScore(index)\n        }\n        updateSelection(index)\n        setStateCurrentQuestion()\n    };\n    const prevTapped = () => {\n        setStatePrevCurrentQuestion()\n    }\n    const updateSelectedIndex = (index) => {\n        debugger;\n        updateSelection(index)\n        updateScore(index)\n    }\n    const setStateCurrentQuestion = () => {\n        if (currentQuestion.order <= questions.length - 1) {\n            let newOrder = currentQuestion.order + 1\n            console.log(\"increment oreder\", newOrder)\n            if (newOrder == questions.length) {\n                showConfirmSubmit()\n                //setIsReviewBool()\n            } else {\n                let newQues = questions[newOrder]\n                console.log(\"next ques\", newQues)\n                setCurrentQuestion(newQues)\n            }\n        }\n    }\n    const setStatePrevCurrentQuestion = () => {\n        if (currentQuestion.order <= questions.length - 1) {\n            let newOrder = currentQuestion.order - 1\n            console.log(\"increment oreder\", newOrder)\n            let newQues = questions[newOrder]\n            setCurrentQuestion(newQues)\n        }\n    }\n    const updateScore = (index) => {\n        let correctAns = questions.filter(eachQues => eachQues.answer === eachQues.selectionIndex).length\n        //if (currentQuestion.answer === index) {\n            setScore(correctAns/questions.length * 100)\n       // }\n    }\n    const updateSelection = (index) => {\n        var currentQuesObj = questions.filter(eachQues => eachQues.id === currentQuestion.id)[0]\n        currentQuesObj.selectionIndex = index\n        console.log(\"Updated question object\", questions)\n    }\n    const flagLastQuestion = () => {\n        console.log(\"is last ques\", isLastQuestion, currentQuestion.order)\n        if (currentQuestion.order === questions.length - 1) {\n            setIsLastQuestion(true)\n            console.log(\"is last ques\", isLastQuestion)\n        } else {\n            setIsLastQuestion(false)\n        }\n    }\n    const flagFirstQuestion = () => {\n        if (currentQuestion.order === 0) {\n            setIsFirstQuestion(true)\n        } else {\n            setIsFirstQuestion(false)\n        }\n    }\n    const setIsReviewBool = () => {\n        setIsReview(true)\n    }\n    const skipTapped = () => {\n\n    };\n    const showConfirmSubmit = () => {\n        setShowConfirmAlert(true)\n    }\n    const confirmSubmit = () => {\n        removeConfirmAlert()\n        setIsReviewBool()\n    }\n    const cancelSubmit = () => {\n        removeConfirmAlert()\n    }\n    const removeConfirmAlert = () => {\n        setShowConfirmAlert(false)\n    }\n    return (\n        <Paper elevation={10} style={paperStyle}>\n            {props.loading ? <CircularSpinner/> : null}\n            {currentQuestion != null ?\n                <QuizUI\n                    question={currentQuestion}\n                    nextCallback={nextTapped}\n                    skipCallback={skipTapped}\n                    prevCallback={prevTapped}\n                    order={currentQuestion.order}\n                    isLastQuestion={isLastQuestion}\n                    isFirstQuestion={isFirstQuestion}\n                    isReview={isReview}\n                    score={score}\n                    totalQuestion={questions}\n                    showAlert = {showConfirmAlert}\n                    updateSelectedIndex={updateSelectedIndex}\n                />\n                : null}\n                {showConfirmAlert ?  <AlertDialogSlide\n                onSubmit = {confirmSubmit}\n                onCancel = {cancelSubmit}\n                />: null}\n        </Paper>\n    )\n}\nconst mapStateToProps = (state) => {\n    return {\n        response: state.quizItemsFetchDataSuccess,\n        error: state.quizItemsHasErrored,\n        loading: state.quizItemsIsLoading\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        fetchQuestion: () => dispatch(fetchQuiz())\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Quiz);","import logo from './logo.svg';\nimport './App.css';\nimport Quiz from './Quiz';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Quiz/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers} from 'redux';\nimport {quizItemsHasErrored, quizItemsIsLoading, quizItemsFetchDataSuccess} from './QuizReducer';\nconst rootReducer = combineReducers({\n    quizItemsHasErrored,\n    quizItemsIsLoading,\n    quizItemsFetchDataSuccess\n})\nexport default rootReducer","import React from 'react'\nexport function quizItemsHasErrored(state = false, action) {\n    switch (action.type) {\n        case 'QUIZ_ITEMS_HAS_ERRORED':\n            return action.hasErrored;\n        default:\n            return state;\n    }\n}\nexport function quizItemsIsLoading(state = false, action) {\n    switch (action.type) {\n        case 'QUIZ_ITEMS_IS_LOADING':\n            return action.isLoading;\n        default:\n            return state;\n    }\n}\nexport function quizItemsFetchDataSuccess(state = [], action) {\n    switch (action.type) {\n        case 'QUIZ_ITEMS_FETCH_DATA_SUCCESS':\n            return action.items;\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Quiz from './Quiz'\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport configureStore from './ConfigureStore';\nconst store = configureStore();\nReactDOM.render(\n  <Provider store = {store}>\n    <App/>\n </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import {createStore, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './RootReducer';\nexport default function configureStore(initialState) {\n    return createStore(\n        rootReducer,\n        initialState,\n        applyMiddleware(thunk)\n    );\n}"],"sourceRoot":""}